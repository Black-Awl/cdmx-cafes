---
import { AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, PUBLIC_MAPTILER_KEY } from '../config';
---

<div id="map"></div>
<div id="loading">Loading data...</div>

<script define:vars={{ AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, PUBLIC_MAPTILER_KEY }}>
  // Airtable configuration
  const Airtable = window.Airtable;
  Airtable.configure({
    apiKey: AIRTABLE_API_KEY
  });
  const base = Airtable.base(AIRTABLE_BASE_ID);

  // Initialize the map
  const map = new maplibregl.Map({
    container: 'map',
    style: `https://api.maptiler.com/maps/basic/style.json?key=${PUBLIC_MAPTILER_KEY}`,
    center: [-99.1332, 19.4326],
    zoom: 12
  });

  // Add navigation controls
  map.addControl(new maplibregl.NavigationControl());

  // Custom icons
  const icons = {
    roaster: '/icons/roaster.png',
    cafe: '/icons/cafe.png',
    laptop_friendly: '/icons/laptop_friendly.png'
  };

  let coffeeShops = [];

  // Function to add markers
  function addMarkers(data) {
    coffeeShops = data;
    
    map.addSource('coffee-shops', {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: coffeeShops.map(shop => ({
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: [shop.fields.Longitude, shop.fields.Latitude]
          },
          properties: {
            id: shop.id,
            name: shop.fields.Name,
            address: shop.fields.Address,
            type: shop.fields.Type,
            description: shop.fields.Description,
            website: shop.fields.Website,
            openHours: shop.fields.OpenHours,
            wifi: shop.fields.WiFi,
            powerOutlets: shop.fields.PowerOutlets
          }
        }))
      }
    });

    // Add a layer for each type of coffee shop
    ['roaster', 'cafe', 'laptop_friendly'].forEach(type => {
      map.addLayer({
        id: `${type}-layer`,
        type: 'symbol',
        source: 'coffee-shops',
        layout: {
          'icon-image': type,
          'icon-size': 0.5,
          'icon-allow-overlap': true
        },
        filter: ['==', 'type', type]
      });
    });

    // Add click event for popups
    map.on('click', (e) => {
      const features = map.queryRenderedFeatures(e.point, {
        layers: ['roaster-layer', 'cafe-layer', 'laptop_friendly-layer']
      });

      if (!features.length) return;

      const feature = features[0];
      new maplibregl.Popup()
        .setLngLat(feature.geometry.coordinates)
        .setHTML(`
          <h3>${feature.properties.name}</h3>
          <p>${feature.properties.address}</p>
          ${feature.properties.description ? `<p>${feature.properties.description}</p>` : ''}
          ${feature.properties.website ? `<p><a href="${feature.properties.website}" target="_blank">Website</a></p>` : ''}
          ${feature.properties.openHours ? `<p>Open Hours: ${feature.properties.openHours}</p>` : ''}
          ${feature.properties.wifi ? '<p>WiFi Available</p>' : ''}
          ${feature.properties.powerOutlets ? '<p>Power Outlets Available</p>' : ''}
        `)
        .addTo(map);
    });

    updateMarkers();
  }

  // Function to update markers based on filters
  function updateMarkers() {
    const checkedFilters = Array.from(document.querySelectorAll('#filters input:checked')).map(input => input.value);
    ['roaster', 'cafe', 'laptop_friendly'].forEach(type => {
      map.setLayoutProperty(`${type}-layer`, 'visibility', 
        checkedFilters.includes(type) ? 'visible' : 'none'
      );
    });
  }

  // Add event listeners to filters
  document.querySelectorAll('#filters input').forEach(input => {
    input.addEventListener('change', updateMarkers);
  });

  // Fetch data from Airtable
  function fetchData() {
    document.getElementById('loading').style.display = 'block';
    return new Promise((resolve, reject) => {
      let allRecords = [];
      base(AIRTABLE_TABLE_NAME).select({
        view: 'Grid view'
      }).eachPage(function page(records, fetchNextPage) {
        records.forEach(record => {
          allRecords.push({
            id: record.id,
            fields: {
              Name: record.get('Name'),
              Address: record.get('Address'),
              Latitude: record.get('Latitude'),
              Longitude: record.get('Longitude'),
              Type: record.get('Type'),
              Description: record.get('Description'),
              Website: record.get('Website'),
              OpenHours: record.get('Open Hours'),
              WiFi: record.get('WiFi Available'),
              PowerOutlets: record.get('Power Outlets')
            }
          });
        });
        fetchNextPage();
      }, function done(err) {
        document.getElementById('loading').style.display = 'none';
        if (err) {
          console.error(err);
          reject(err);
        }
        resolve(allRecords);
      });
    });
  }

  // Load icons and fetch data
  map.on('load', () => {
    ['roaster', 'cafe', 'laptop_friendly'].forEach(type => {
      map.loadImage(icons[type], (error, image) => {
        if (error) throw error;
        map.addImage(type, image);
      });
    });

    fetchData().then(addMarkers).catch(error => {
      console.error('Error fetching data:', error);
      alert('Failed to load data. Please try again later.');
    });
  });
</script>

<style>
  #map {
    width: 100%;
    height: 100vh;
  }
  #loading {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 10px;
    border-radius: 5px;
    z-index: 2;
  }
</style>